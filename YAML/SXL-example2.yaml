---
id: Plant id
version: '1.1'
date: '2022-07-23'
description: Plant name
constructor: RSMP Nordic
created-date: '2010-04-20'
rsmp-version: '3.2'
objects:
  Traffic Light Controller:
    description: 
    aggregated_status:
      1:
        title: Local mode
        description: Traffic Light Controller is in local mode. NTS has no control.
      2:
        title: No Communications
      3:
        title: High Priority Fault
        description: Traffic Light Controller is in fail safe mode; e.g. yellow flash
          or dark mode
      4:
        title: Medium Priority Fault
        description: |-
          Traffic Light Controller has a medium priority fault, but not in fail safe mode.
          E.g. several lamp faults or detector fault
      5:
        title: Low Priority Fault
        description: Traffic Light Controller has a low priority fault. E.g. Detector
          fault
      6:
        title: Connected / Normal - In Use
      7:
        title: Connected / Normal - Idle
        description: |-
          Traffic Light Controller dark according to configuration.
          NOTE! When dark according to configuration the controller is considered to be in use
      8:
        title: Not Connected
    functional_position: 
    functional_state: 
    alarms:
      A0001:
        description: |-
          Serious hardware error.
          Is a "major fault" defined according to 3.8 i EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
      A0002:
        description: |-
          Less serious hardware error.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
      A0003:
        description: |-
          Serious configuration error.
          Is a "major fault" defined according to 3.8 in EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
      A0004:
        description: |-
          Less serious configuration error.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
      A0005:
        description: |-
          Synchronisation error (coordination).
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
      A0006:
        description: |-
          Safety error
          Is a "major fault" defined according to 3.8 in EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
      A0007:
        description: |-
          Communication error.
          Used for communication errors with the central system. Includes NTP connection loss if the TLC is configured to use NTP.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        arguments:
          protocol:
            type: string
            description: Type of communication error, e.g. NTP or RSMP
            values:
              rsmp: RSMP
              ntp: NTP
      A0009:
        description: |-
          Other error.
          Used for other errors not covered by any other alarm type.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
      A0010:
        description: |-
          Door open.
          Used for open door (room or cabinet).
        priority: 3
        category: D
    statuses:
      S0001:
        description: |-
          Signal group status.
          Provides the status of each signal group, including basic information such as green, yellow and red. But also detailed technical information.
          Can be used to draw a live signal group diagram as well provide diagnostic information about the performance of the controller.
        arguments:
          signalgroupstatus:
            type: string
            description: |-
              Signal group status as text field.
              Each character represent the state of the signal group in consecutive order.
              Signal group status is described in detail in the corresponding section.
              - = Signal group is undefined/does not exist
            pattern: "^[a-hA-G0-9N-P]*$"
          cyclecounter:
            type: integer
            description: |-
              Cycle counter.
              Used for handling of coordination between TLC’s.
              Is counted from 0 until it reaches the cycle time (See S0028).
              
              c = (b + o) mod t
              
              where c = cycle counter,
              b = base cycle counter,
              o = offset,
              t = cycle time,
              mod = modulo
              
              See the coordination section for more information.
            min: 0
            max: 999
          basecyclecounter:
            type: integer
            description: |-
              Base cycle counter.
              Used for handling of coordination between TLC’s.
              Synchronized between all TLC’s in an active coordination.
              See the coordination section for more information.
            min: 0
            max: 999
          stage:
            type: integer
            description: Current stage (isolated)
            min: 0
            max: 999
      S0002:
        description: |-
          Detector logic status.
          Provides the status of all detector logics of the controller.
          Can be used to draw a live signal group diagram as well provide diagnostic information about the performance of the controller. Can also be used for bus priority, external control systems, and much more.
        arguments:
          detectorlogicstatus:
            type: string
            description: |-
              Detector logic status as text field
              Each character represent the state of the detector logic in consecutive order.
              0 : Detector logic is not active
              1 : Detector logic is active
              - : Detector logic is undefined/does not exist
      S0003:
        description: |-
          Input status.
          Input (1-255) of the controllers general purpose I/O.
          Input is used where the traffic light controller must react to external control. It could be external detectors, bus priority, and much more.
        arguments:
          inputstatus:
            type: string
            description: |-
              Input status as text field
              Each character represent the state of the input in consecutive order.
              0 : Input is not active
              1 : Input is active
              - : Input is undefined/does not exist
          extendedinputstatus:
            type: string
            deprecated: true
            description: |-
              Extended input status as text field
              Each character represent the state of the extended input status in consecutive order.
              0 : Input is not active
              1 : Input is active
              - : Input is undefined/does not exist
      S0004:
        description: |-
          Output status.
          Output (1-255) of the controllers general purpose I/O.
          Can be used for all types of output where the traffic light controller needs to control other equipment. Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
        arguments:
          outputstatus:
            type: string
            description: |-
              Output status as text field
              Each character represent the state of the output status in consecutive order.
              0 : Output is not active
              1 : Output is active
              - : Output is undefined/does not exist
          extendedoutputstatus:
            type: string
            deprecated: true
            description: |-
              Extended output status as text field
              Each character represent the state of the extended output status in consecutive order.
              0 : Output is not active
              1 : Output is active
              - : Output is undefined/does not exist
      S0005:
        description: |-
          Traffic Light Controller starting.
          The traffic signal is starting, e.g. it is in startup mode and has not begun working normally yet.
          During startup mode the traffic controller shows dark, red, yellow flash or using the predetermined start cycle (minimum times).
        arguments:
          status:
            type: boolean
            description: |-
              False: Controller is not in start up mode
              True: Controller is currently in start up mode
      S0006:
        description: |-
          Emergency stage.
          The status is active during emergency prioritization.
          Used in situations where full priority is given in the emergency vehicle program.
        arguments:
          status:
            type: boolean
            description: |-
              False: Emergency stage inactive
              True: Emergency stage active
          emergencystage:
            type: integer
            description: Number of emergency stage
            min: 1
            max: 255
      S0007:
        description: |-
          Controller switched on.
          The controller is active and is not in dark mode.
          Used to determine if the controller is operating, e.g. it shows red, green or yellow to the vehicles.
          During maintenance work the controller might be using dark mode (no output to the signal heads).
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "0" and "True" (one intersection) or "1,2" and "True,False" (two intersections).
        arguments:
          intersection:
            type: integer
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean
            description: |-
              False: Traffic Light Controller in dark mode
              True: Traffic Light Controller not in dark mode
          source:
            description: Source of the status change
            type: string
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0008:
        description: |-
          Manual control.
          Traffic control deactivated in controller.
          Signal timings is controlled manually by service personnel using the operating panel of the controller.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "0" and "True" (one intersection) or "1,2" and "True,False" (two intersections).
        arguments:
          intersection:
            type: integer
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean
            description: |-
              False: Manual control inactive
              True: Manual control active
          source:
            type: string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0009:
        description: |-
          Fixed time control.
          Traffic actuated control deactivated and a pre-timed control is used.
          Usually only used in case normal detectors can't be used, e.g. during maintenance work.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "0" and "True" (one intersection) or "1,2" and "True,False" (two intersections).
        arguments:
          intersection:
            type: integer
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean
            description: |-
              False: Fixed time control inactive
              True: Fixed time control active
          source:
            type: string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0010:
        description: |-
          Isolated control.
          Isolated control mode indicates that the controller operates independently of any other traffic light controller. This may be different depending on traffic program (time plan).
          Used to determine if the controller is operating independently or operating with other controllers (coordination).
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "0" and "True" (one intersection) or "1,2" and "True,False" (two intersections).
        arguments:
          intersection:
            type: integer
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean
            description: |-
              False: Isolated control disabled
              True: Isolated control enabled (Vehicle actuated control or Fixed time control)
          source:
            type: string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0011:
        description: |-
          Yellow flash.
          The controller shows yellow flash.
          Yellow flash may be used during a serious fault (depending on configuration) or maintenance work. It can also be manually set using M0001.
          Some countries may use yellow flash as an normal operating mode, and not necessarily during fault.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "1,2" and "True,False"
        arguments:
          intersection:
            type: integer
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean
            description: |-
              False: Yellow flash disabled
              True: Yellow flash enabled
          source:
            type: string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0012:
        description: |-
          All red.
          The controller show all red.
          All red can be manually set using the controllers operating panel during maintenance work.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "1,2" and "True,False"
        arguments:
          intersection:
            type: integer
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean
            description: |-
              False: All red disabled
              True: All red enabled
          source:
            type: string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0013:
        description: |-
          Police key
          The controller is forced to dark mode or yellow flash.
          The "police key" is a external control switch present in some controllers that manually switches the controller to either dark mode or yellow flash.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "1,2" and "0,1"
        arguments:
          intersection:
            type: integer
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: integer
            values:
              0: disabled
              1: dark mode
              2: yellow flash
              3: all red
      S0014:
        description: |-
          Current time plan.
          The current time plan (signal program) used in the controller. There may be 1-255 predefined time plans.
          The time plan (signal program) may change signal timings, cycle time, control strategy and much more. Typical usage is is scenario based control where change of program is used to change priority etc.
        arguments:
          status:
            type: integer
            description: Current time plan
            min: 1
            max: 255
          source:
            type: string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0015:
        description: |-
          Current traffic situation.
          The current traffic situation used in the controller.
          Used for area-based control where a command can be sent to a master traffic light controller about which predefined traffic situation to use (1-255).
          Traffic situation is a concept used to divide multiple TLC's into areas and sub-areas. The traffic situation gives the possibility to change the TLC sub-area dynamically depending on the time of day and the traffic flow. Depending on the traffic situation each TLC selects the time plan dynamically.
        arguments:
          status:
            type: integer
            description: Current traffic situation
            min: 1
            max: 255
          source:
            type: string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0016:
        description: |-
          Number of detector logics.
          Can be used by the management system to check the number of detector logics configured in the controller.
        arguments:
          number:
            type: integer
            description: Number of detector logics
            min: 1
            max: 65025
      S0017:
        description: |-
          Number of signal groups.
          Can be used for the management system to check the number of signal groups configured in the controller.
        arguments:
          number:
            type: integer
            description: Number of signal groups
            min: 1
            max: 65025
      S0018:
        description: |-
          Number of time plans
          Can be used for the management system to check the number of time plans configured in the controller.
        arguments:
          number:
            type: integer
            description: Number of time plans (depreciated)
            min: 1
            max: 65025
      S0019:
        description: |-
          Number of traffic situations.
          Can be used for the management system to check the number of traffic situations configured in the controller.
        arguments:
          number:
            type: integer
            description: Number of traffic situations
            min: 1
            max: 65025
      S0020:
        description: |-
          Control mode.
          Can be used for the management system to check the current control mode (startup, normal, standby, failure, test).
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "1,2" and "startup,control"
        arguments:
          intersection:
            type: integer
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          controlmode:
            type: string
            values:
              startup: Startup mode
              control: Normal control
              standby: Standby mode
              failure: Failure mode
              test: Test mode
      S0021:
        description: |-
          Manually set detector logic.
          Provides status of detector logic (1-255) regarding if they are either forced to true or false.
          Can be used to connect RSMP compatible detection equipment to the traffic light controller. Can also be used for prioritization.
        arguments:
          detectorlogics:
            type: string
            description: Manually set detector logics (1/0) as text field
            pattern: "^[01]*$"
      S0022:
        description: |-
          List of time plans.
          Provides a list of the configured time plans which is possible to use. This status was added due to status S0018 only provides the total number of time plans and not which were possible to use with M0002.
          Can be used for the management system to check the number of time plans configured in the controller.
        arguments:
          status:
            type: string
            description: Comma separated list of configured time plans. E.g. "1,2,3,5"
      S0023:
        description: |-
          Dynamic bands.
          Provides a list of all defined dynamic bands. Dynamic bands moves start of signal groups in the cycle and changes the signal timings.
          A typical usage of dynamic bands is scenario based control where changing of signal timings is used for optimal traffic flow.
        arguments:
          status:
            type: string
            description: |-
              Dynamic bands.
              Each dynamic band are written as pp-dd-ee where:
              pp=Time plan
              dd=Dynamic band number (from 1-10)
              ee=Extension in seconds in this band
              
              Each dynamic band is separated with a comma.
              
              E.g.
              pp-dd-ee,pp-dd-ee
            pattern: "(^$)|(^(?<item>(\\d{1,2})\\-\\d{1,2}-\\d{1,2})(,\\g<item>)*$)"
      S0024:
        description: |-
          Offset time.
          Offset time is used to define an offset between intersections in coordinated control. It is based on the expected travel time between intersections.
          Can be used by the management system to check to fine tune the coordination for optimal traffic flow.
        arguments:
          status:
            type: string
            description: |-
              Offset table
              Each offset time is written as pp-tt where:
              pp=time plan
              tt=offset time in seconds
              
              Each offset time is separated with a comma
              
              E.g.
              pp-tt,pp-tt
            pattern: "^(\\d{1,2}\\-\\d{1,2})(?:,(\\d{1,2}\\-\\d{1,2}))*$"
      S0026:
        description: |-
          Week time table.
          Week time table for signal programs (time plan) to use for each day during a week.
          The week time table determine which predefined signal timings (time plan) to use during the week for optimal traffic flow.
        arguments:
          status:
            type: string
            description: |-
              Week time table. Defines time table to use for each week day
              Each day is written as d-t where:
              d=day of week
              t=time table nr
              
              Day of week legend:
              0=Monday
              1=Tuesday
              2=Wednesday
              3=Thursday
              4=Friday
              5=Saturday
              6=Sunday
              
              Each segment is separated with a comma
              E.g.
              d-t,d-t
      S0027:
        description: |-
          Time tables.
          Time of day for when to switch signal program (time plan).
          The signal timings (time plan) to use during time of day for optimal traffic flow.
        arguments:
          status:
            type: string
            description: |-
              Time Table. Defines time tables.
              Each time definition is written as t-o-h-m where:
              t=time table nr (1-12)
              o=function
              h=hour - switching time
              m=minute - switching minute
              
              Function legend:
              0=no plan is selected by time table
              1=set plan 1
              …
              16= set plan 16
              
              hour and minute is using local time (not UTC)
              
              Each time definition is separated with a comma
              
              E.g.
              t-o-h-m,t-o-h-m
      S0028:
        description: |-
          Cycle time.
          Cycle time (or cycle length) is the sum of all phases in a time plan (traffic program). This time is fixed when using fixed time control or coordination (except "local coordination"). When the cycle counter reaches this length it is reset back to zero.
          Changing the cycle time can be used as part of scenario based control.
        arguments:
          status:
            type: string
            description: |-
              Cycle time table
              Each cycle time is written as pp-tt where:
              pp=time plan
              tt=cycle time in seconds
              
              Each cycle time is separated with a comma
              
              E.g.
              pp-tt,pp-tt
      S0029:
        description: |-
          Forced input status.
          Provide status of input (1-255) regarding if they are forced or not. Can be used for all types of input where the traffic light controller must react to external control.
          Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
        arguments:
          status:
            type: string
            description: Forced input status as text field
      S0030:
        description: |-
          Forced output status.
          Provide status of output (1-255) regarding if they are forced or not. Can be used for all types of output where the traffic light controller needs to control other equipment.
          Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
        arguments:
          status:
            type: string
            description: Forced output status as text field
      S0031:
        description: |-
          Trigger level sensitivity for loop detector.
          The trigger level sensitivity determines at what level the loop detector should trigger. If it set too low then then traffic will not be detected as intended. If it is set too high the detector might give false positives.
          Can be used to make sure that the detectors detect traffic as intended.
        arguments:
          status:
            type: string
            description: |-
              Loop detector trigger level sensitivity is written as dd-ss where:
              dd=loop detector number
              ss=sensitivity value
              Each loop detector is separated with a comma. E.g.dd-ss,dd-ss.
      S0032:
        description: |-
          Coordinated control
          This status is used when coordination between traffic light controllers is active. Coordination is described in detail in the corresponding section
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. “1,2” and “centralized,off”
        arguments:
          intersection:
            type: integer
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: string
            values:
              local: Local coordination
              centralized: Coordination with synchronized clock
              'off': Coordination not active
          source:
            description: Source of the status change
            type: string
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0033:
        description: |-
          Signal Priority Status
          This status can be used to get updates about priority requests. For example, you can use it to know when priority requests are activated or cancelled.
          A list of priorities is returned, referred to by their request ids. The same request id can appear only once.
          All priorities are included in the list (not only the ones that have changed state since the last update). This is done regardless of whether the status is send in respond to a status request, or due to a status subscription, and also regardless of whether a status subscription uses an update interval, or send-on-change, or both.
          If you subscribe using an update interval, you’re not guaranteed to get all intermediate states. To guarantee that, send-on-change must be used when subscribing.
          To understand how this status relates to ETSI/J2735, please see the [wiki](https://github.com/rsmp-nordic/rsmp_sxl_traffic_lights/wiki/Signal-priority-and-ETSI-J2735).
          All priorities are send on every status update, regardless of whether an interval, or sendOnChange (or both) is used.
          When a priority reaches an end states (completed, timeout, rejected, cooldown or stale), it must be sent once on the next status update, then removed from the list.
          A request always starts in the ‘received’ state. The following table shows the possible state transitions:
          
          State      | Possible next states
          ---------- | -------------------------------------
          received   | queued, activated, rejected, cooldown
          queued     | activated, timeout
          activated  | completed, stale
          completed  |
          timeout    |
          rejected   |
          cooldown   |
          stale      |
        arguments:
          status:
            description: JSON array of priority status items
            type: array
            items:
              r:
                type: string
                description: ID of the priority request
              t:
                type: string
                description: |-
                  Timestamp, indicating when the priority last changed state.
                  Format according to W3C XML dateTime with a resolution of 3 decimal places.
                  All time stamps in UTC. E.g. 2009-10-02T14:34:34.341Z
              s:
                type: string
                description: Current status of the priority request
                values:
                  received: A new priority request was received but has not yet been
                    processed
                  queued: The priority request has been queued for later activation
                  activated: The priority was activated
                  completed: The priority was cancelled as expected
                  timeout: The priority has been queued for too long
                  rejected: The priority request cannot be granted
                  cooldown: A similar priority request means the priority request
                    cannot be activated now
                  stale: The priority has been active too long without cancellation,
                    and was therefore removed
              e:
                type: integer
                description: |-
                  Estimated green extension provided by the priority, in seconds
                  Only used when state is ‘completed’.
                optional: true
                min: 0
                max: 255
              d:
                type: integer
                description: |-
                  Estimated red reduction provided by the priority, in seconds
                  Only used when state is ‘completed’.
                optional: true
                min: 0
                max: 255
      S0034:
        description: |-
          Timeout for dynamic bands.
          Time until a designated time plan is entered due to lost connection with the supervisor.
          Disabled if set to '0'.
          Used in conjunction with dynamic bands, M0014
        arguments:
          status:
            type: integer
            description: Timeout, in minutes
            min: 0
            max: 65535
      S0091:
        description: |-
          Operator logged in/out OP-panel.
          Provides information if maintenance personnel is currently working on site.
        arguments:
          user:
            type: integer
            values:
              0: Nobody logged in
              1: Operator logged in at level 1 (read only)
              2: Operator logged in at level 2 (read/write)
      S0092:
        description: |-
          Operator logged in/out web-interface.
          Provides information if maintenance personnel is currently working with the controller.
        arguments:
          user:
            type: integer
            values:
              0: Nobody logged in
              1: Operator logged in at level 1 (read only)
              2: Operator logged in at level 2 (read/write)
      S0095:
        description: |-
          Version of Traffic Light Controller.
          Provides diagnostic version information.
        arguments:
          status:
            type: string
            description: Manufacturer, product name and version of traffic light controller
      S0096:
        description: |-
          Current date and time.
          Note: UTC is used.
          Provides diagnostic information about the current date and time set in the controller.
        arguments:
          year:
            type: integer
            description: Year
            min: 0
            max: 9999
          month:
            type: integer
            description: Month
            min: 1
            max: 12
          day:
            type: integer
            description: Day of month
            min: 1
            max: 31
          hour:
            type: integer
            description: Hour
            min: 0
            max: 23
          minute:
            type: integer
            description: Minute
            min: 0
            max: 59
          second:
            type: integer
            description: Second
            min: 0
            max: 59
      S0097:
        description: |-
          Checksum of traffic parameters.
          Can be used to check if any traffic parameter has been changed.
          For instance, depending on controller, maintenance personnel can modify traffic parameters on site to optimize traffic flow. This status provides the ability to monitor if any traffic parameter has been changed. The traffic parameters may be downloaded with S0098.
        arguments:
          checksum:
            type: string
            description: |-
              Checksum of the traffic parameters
              Uses SHA-2 as hashing algorithm
              Includes
              - all signal programs, including program versions
              - signal group settings
              - time plans
              - safety matrix
              - intergreen times
              - detector settings
              
              It should NOT include:
              - network settings
              - log files
              - software
              - other device settings that are not part of the signal program
              
              Note:
              - The checksum should be calculated using the same data as used in S0098
              - Data Downloaded with S0098 and hashed with SHA-2 should match this value.
          timestamp:
            type: string
            description: Time stamp of the checksum. Format according to W3C XML dateTime
              with a resolution of 3 decimal places. All time stamps in UTC. E.g.
              2009-10-02T14:34:34.341Z
      S0098:
        description: |-
          Configuration of traffic parameters.
          Can be used to download all traffic parameters from the controller.
          For instance, depending on controller, maintenance personnel can modify traffic parameters on site to optimize traffic flow. This status provides the ability to downloaded them.
        arguments:
          config:
            type: base64
            description: |-
              Traffic parameters.
              Includes
              - all signal programs, including program versions
              - signal group settings
              - time plans
              - safety matrix
              - intergreen times
              - detector setting
              
              It should NOT include:
              - network settings
              - log files
              - software
              - other device settings that are not part of the signal program
              
              Note:
              - There is no way to upload this binary file to the TLC using RSMP
              - The format of the binary file is not specified and is not expected to be compatible between suppliers
          timestamp:
            type: string
            description: Time stamp of the config. Format according to W3C XML dateTime
              with a resolution of 3 decimal places. All time stamps in UTC. E.g.
              2009-10-02T14:34:34.341Z
          version:
            type: string
            description: |-
              Version information of the configuration. Contains basic information such as controller id, changes to config and other information.
              The format is not specified in detail.
      S0205:
        description: |-
          Traffic Counting: Number of vehicles.
          This status was introduced to improve performance in case traffic counting is done on all all detectors.
        arguments:
          start:
            type: string
            description: Time stamp for start of measuring. Format according to W3C
              XML dateTime with a resolution of 3 decimal places. All time stamps
              in UTC. E.g. 2009-10-02T14:34:34.341Z
          vehicles:
            type: integer
            description: |-
              Number of vehicles.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
      S0206:
        description: |-
          Traffic Counting: Vehicle speed
          This status was introduced to improve performance in case traffic counting is done on all all detectors.
        arguments:
          start:
            type: string
            description: |-
              Time stamp for start of measuring. Format according to W3C
              XML dateTime with a resolution of 3 decimal places. All time stamps
              in UTC. E.g. 2009-10-02T14:34:34.341Z
          speed:
            type: integer
            description: |-
              Average speed in km/h (integer).
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
      S0207:
        description: |-
          Traffic Counting: Occupancy.
          This status was introduced to improve performance in case traffic counting is done on all all detectors.
        arguments:
          start:
            type: string
            description: |-
              Time stamp for start of measuring. Format according to W3C
              XML dateTime with a resolution of 3 decimal places. All time stamps
              in UTC. E.g. 2009-10-02T14:34:34.341Z
          occupancy:
            type: integer
            description: |-
              Occupancy in percent (%) (0-100)
              - Value expressed as an integer with a range of 0-100.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 100
      S0208:
        description: |-
          Traffic Counting: Number of vehicles of given classification.
          This status was introduced to improve performance in case traffic counting is done on all all detectors.
        arguments:
          start:
            type: string
            description: |-
              Time stamp for start of measuring. Format according to W3C
              XML dateTime with a resolution of 3 decimal places. All time stamps
              in UTC. E.g. 2009-10-02T14:34:34.341Z
          P:
            type: integer
            description: |-
              Number of cars.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          PS:
            type: integer
            description: |-
              Number of cars with trailers.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          L:
            type: integer
            description: |-
              Number of trucks.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          LS:
            type: integer
            description: |-
              Number of trucks with trailers.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          B:
            type: integer
            description: |-
              Number of buses.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          SP:
            type: integer
            description: |-
              Number of trams.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          MC:
            type: integer
            description: |-
              Number of motor cycles.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          C:
            type: integer
            description: |-
              Number of bicycles.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          F:
            type: integer
            description: |-
              Number of pedestrians.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
    commands:
      M0001:
        description: |-
          Sets functional position.
          Sets the controller to yellow flash, dark mode or normal control.
          Requires security code 2.
        arguments:
          status:
            type: string
            description: Set operating mode
            values:
              NormalControl: Normal Control
              YellowFlash: Enables yellow flash
              Dark: Enables dark mode
          securityCode:
            type: string
            description: Security code 2
          timeout:
            type: integer
            description: |-
              Time in minutes until controller automatically reverts to previous functional position.
              0=no automatic return
            min: 0
            max: 1440
          intersection:
            type: integer
            description: Intersection number
            min: 0
            max: 255
        command: setValue
      M0002:
        description: |-
          Sets current time plan.
          Change of traffic program of the traffic light controller.
          Typical usages is scenario based control where change of program is used to change signal timings etc.
          This command changes the signal timings for optimal traffic flow.
          Requires security code 2
        arguments:
          status:
            type: boolean
            description: |-
              False: Controller uses time plan according to programming
              True: Controller uses time plan according to command
          securityCode:
            type: string
            description: Security code 2
          timeplan:
            type: integer
            description: designation of time plan
            min: 1
            max: 255
        command: setPlan
      M0003:
        description: |-
          Sets traffic situation the controller uses.
          Used for area-based control where a command can be sent to a master traffic light controller about which predefined traffic situation to use (1-255).
          Traffic situation is a concept used to divide multiple TLC's into areas and sub-areas. The traffic situation gives the possibility to change the TLC sub-area dynamically depending on the time of day and the traffic flow. Depending on the traffic situation each TLC selects the time plan dynamically.
          Requires security code 2
        arguments:
          status:
            type: boolean
            description: |-
              False: Controller uses traffic situation according to own programming
              True: Controller uses traffic situation according to command
          securityCode:
            type: string
            description: Security code 2
          traficsituation:
            type: integer
            description: designation of traficsituation
            min: 1
            max: 255
        command: setTrafficSituation
      M0004:
        description: |-
          Restarts Traffic Light Controller.
          Used in the event of serious faults in the device where a restart is considered to be able to remedy a problem.
          Requires security code 2
        arguments:
          status:
            type: boolean
            description: 'True: Restart controller'
          securityCode:
            type: string
            description: Security code 2
        command: setRestart
      M0005:
        description: |-
          Activate emergency route.
          The function is made for emergency prioritization. Works in the same way as the M0006 and M0008 where the traffic light controller responds to an input.
          Should be used in situations where full priority is given in the emergency vehicle program.
          Requires security code 2.
        arguments:
          status:
            type: boolean
            description: |-
              False: Deactivate emergency route
              True: Activate emergency route
          securityCode:
            type: string
            description: Security code 2
          emergencyroute:
            type: integer
            description: Number of emergency route
            min: 1
            max: 255
        command: setEmergency
      M0006:
        description: |-
          Activate input.
          Set given input (1-255) of the controllers general purpose I/O to either true or false.
          The function can provide an input to the traffic light controller on which a predefined action can be taken.
          Can be used for all types of input where the traffic light controller must react to external control.
          Typical usages are bus priority, coordination between traffic controllers, external control systems, and much more.
          Requires security code 2.
        arguments:
          status:
            type: boolean
            description: |-
              False: Deactivate input
              True: Activate input
          securityCode:
            type: string
            description: Security code 2
          input:
            type: integer
            description: Number of Input
            min: 1
            max: 255
        command: setInput
      M0007:
        description: |-
          Activate fixed time control.
          Deactivates the traffic actuated control using detectors and activates pre-timed control.
          Can be used in case normal detectors can't be used, e.g. during maintenance work.
          Requires security code 2.
        arguments:
          status:
            type: boolean
            description: |-
              False: Deactivate fixed time control
              True: Activate fixed time control
          securityCode:
            type: string
            description: Security code 2
        command: setFixedTime
      M0012:
        description: |-
          Request start or stop of a series of signal groups.
          Starts or stops several signal groups.
          This command was introduced due to coordination requirements needing to set many signal groups to green and red at the same time and M0010 and M0012 being to slow to send a message for each signal group individually.
          Although this command is intended to be used with coordination it is not actually specified to be used for this yet. It is reserved in the SXL for possible future use.
          Intended for use with coordination of signaling systems where a traffic light controller communicates with neighboring controllers.
          Only used when a primary controller orders signal group of other controller to green or red (Coordination with external control bits).
          May also include purposes for adaptive control where a UTC system or a local traffic light controller takes over the phase control (stage control).
          Requires security code 2.
        reserved: true
        arguments:
          status:
            type: string
            description: |-
              Orders signal groups to green or red. Sets a block of 16 signal groups at a time. Can be repeated to set several blocks of 16 signal groups. Values are separated with comma. Blocks are separated with semicolon. Since semicolon breaks the SXL csv-format, colon is used in example below.
              
              1=Order signal group to green
              0=Order signal group to red
              
              Format: [Offset],[Bits to set],[Bits to unset]:…
              
              Offset sets where the 16 inputs starts from followed by two 16 bit values telling which bit to set and unset in binary format, i.e. first bit have value 1 and last bit have value 32768.
              
              Example 1:
              "5, 4134, 65" sets input 6,7,10,17 = on and 5,11 = off
              (Input starts from no. 5 and bit 1,2,5,12 = 1 and bit 0,6 = 0)
              
              Example 2:
              "22, 1, 4" sets input 22 = on and 24 = off
              (Input starts from no. 22 and bit 0 = 1 and bit 2 = 0)
              
              And both these examples could be sent in the same message as:
              "5,4143,65:22,1,4"
              
              Such a message would order signal group 6,7,10,17,22 to green and signal group 5,11,24 to red
          securityCode:
            type: string
            description: Security code 2
        command: setStart
      M0013:
        description: |-
          Activate a series of inputs
          
          Set given inputs (1-255) of the controllers general purpose I/O to either true or false. This command was introduced due to coordination requirements needing to set many inputs to true/false at the same time and M0006 being to slow to send a message for each input individually. With this command many inputs can be set to true/false at the same time using a single command message. It can be used for all types of input where the traffic light controller must react to external control. Typical usages are bus priority, coordination between traffic controllers, external control systems, and much more.
          
          Requires security code 2.
          
          The parameter ‘status’ sets/unsets a block of 16 inputs at a time. It can be repeated to set several blocks of 16 inputs. Values are separated with comma. Blocks are separated with semicolon. Format: [Offset];[Bits to set];[Bits to unset];…
          
          - ‘Offset’ defines where the 16 inputs starts from
          - ‘Bits to set’ defines which bit(s) to set. ‘0’ if unused
          - ‘Bits to unset’ defines which bit(s) to unset. ‘0’ if unused
          
          Example 1:
          “3,4134,65” sets input 4,5,8,15 and unsets 3,9
          - Input starts from no. 5
          - “4134” is 1 0000 0010 0110 in binary, but since input starts from 3, it is shifted 3 bits, e.g. 1000 0001 0011 0000 which are bits 4,5,8,15
          - “65” is 100 0001 in binary, but since input starts from 3, it is shifted 3 bits, e.g. 10 0000 1000 which are bits 3,9
          
          Example 2:
          “12,1,4” sets input 12 and unsets 14
          - Input starts from no. 12
          - “1” is 1 in binary, but since input starts at 12 it is shifted 12 bits, e.g. 1 0000 0000 0000, which is bit 12
          - “4” is 100 in binary, but since input starts at 12 it is shifted 12 bits, e.g. 100 0000 0000 0000, which is bit 14
          
          And both these examples could be sent in the same message as: “3,4143,65;12,1,4”
          
          Such a message would set input 4,5,8,12,15 and unset input 3,9,14
          
          Example 3:
          “0,1,2” sets input 0 and unsets 1
          - Input starts from 0
          - “1” is 1 in binary, which is bit 0
          - “2” is 10 in binary, which is bit 1
        arguments:
          status:
            type: string
            description: |-
              Sets/Unsets a block of 16 inputs at a time. Can be repeated to set several blocks of 16 inputs. Values are separated with comma. Blocks are separated with semicolon.
              Format: [Offset];[Bits to set];[Bits to unset];…
          securityCode:
            type: string
            description: Security code 2
        command: setInput
      M0014:
        description: |-
          Set dynamic bands.
          Can be used to change between predefined signal timings. Moves the start of signal groups in the cycle.
          This command can be used to change the split of green time during the cycle. A typical usage is scenario based control where changing of signal timings is used for optimal traffic flow.
          Requires security code 2
        arguments:
          plan:
            type: integer
            description: Plan to be changed
            min: 0
            max: 255
          status:
            type: string
            description: |-
              Dynamic bands.
              Each dynamic band are written as dd-ee where:
              dd=Dynamic band number (from 1-10)
              ee=Extension in seconds in this band
              
              Each dynamic band is separated with a comma.
              
              E.g.
              dd-ee,dd-ee
          securityCode:
            type: string
            description: Security code 2
        command: setCommands
      M0015:
        description: |-
          Set Offset time.
          Offset time is used to define an offset between intersections in coordinated control. It is based on the expected travel time between intersections.
          This command can be used to fine tune the coordination for optimal traffic flow.
          Requires security code 2.
        arguments:
          status:
            type: integer
            description: Set offset time in seconds
            min: 0
            max: 255
          plan:
            type: integer
            description: Time plan nr
            min: 0
            max: 255
          securityCode:
            type: string
            description: Security code 2
        command: setOffset
      M0016:
        description: |-
          Set week time table.
          Set which time table for signal programs to use for each day during a week.
          This command changes the signal timings during the week for optimal traffic flow.
          Requires security code 2.
        arguments:
          status:
            type: string
            description: |-
              Week time table. Defines time table to use for each week day
              Each segment is written as d-t where:
              d=day of week
              t=time table nr
              
              Day of week legend:
              0=Monday
              1=Tuesday
              2=Wednesday
              3=Thursday
              4=Friday
              5=Saturday
              6=Sunday
              
              Each segment is separated with a comma
              
              E.g.
              d-t,d-t
          securityCode:
            type: string
            description: Security code 2
        command: setWeekTable
      M0017:
        description: |-
          Set time tables.
          Set time of day for when to automatically switch signal program (time plan).
          This command changes the signal timings according to time of day for optimal traffic flow.
          Requires security code 2.
        arguments:
          status:
            type: string
            description: |-
              Time Table. Defines time tables.
              Each time definition is written as t-o-h-m where:
              t=time table nr (1-12)
              o=function
              h=hour - switching time
              m=minute - switching minute
              
              Function legend:
              0=no plan is selected by time table
              1=set plan 1
              …
              16= set plan 16
              
              hour and minute is using local time (not UTC)
              
              Each time definition is separated with a comma.
              
              E.g.
              t-o-h-m,t-o-h-m
          securityCode:
            type: string
            description: Security code 2
        command: setTimeTable
      M0018:
        description: |-
          Set Cycle time.
          Cycle time (or cycle length) is the sum of all phases in a time plan (traffic program). This time is fixed when using fixed time control or coordination (except "local coordination"). When the cycle counter reaches this length it is reset back to zero.
          This command provides the ability to change the cycle time when using coordinated or fixed time control. It changes the timings for optimal traffic flow. Can be used with scenario based control.
          Requires security code 2.
        arguments:
          status:
            type: integer
            description: Set cycle time in seconds
            min: 1
            max: 255
          plan:
            type: integer
            description: Time plan nr
            min: 0
            max: 255
          securityCode:
            type: string
            description: Security code 2
        command: setCycleTime
      M0019:
        description: |-
          Force input.
          Force a given input (1-255) of the controllers general purpose I/O to either True or False. Can be used for all types of input where the traffic light controller must react to external control.
          Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
          Requires security code 2.
        arguments:
          status:
            type: boolean
            description: |-
              False: Release input
              True: Force input
          securityCode:
            type: string
            description: Security code 2
          input:
            type: integer
            description: Number of Input
            min: 1
            max: 255
          inputValue:
            type: boolean
            description: |-
              False: input forced to False
              True: input forced to True
        command: setInput
      M0020:
        description: |-
          Force output.
          Force a given output (1-255) of the controllers general purpose I/O to either True of False. Can be used for all types of output where the traffic light controller needs to control other equipment.
          Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
          Requires security code 2.
        arguments:
          status:
            type: boolean
            description: |-
              False: Force output
              True: Release output
          securityCode:
            type: string
            description: Security code 2
          output:
            type: integer
            description: Number of Output
            min: 1
            max: 255
          outputValue:
            type: boolean
            description: |-
              False: output forced to False
              True: output forced to True
        command: setOutput
      M0021:
        description: |-
          Set trigger level sensitivity for loop detector.
          The trigger level sensitivity determines at what level a loop detector should trigger. If it set too low then then traffic will not be detected as intended. If it is set too high the detector might give false positives.
          This command provides the ability to fine tune loop detectors to make sure they detect traffic as intended.
          Requires security code 2
        arguments:
          status:
            type: string
            description: |-
              Loop detector trigger level sensitivity is written as dd-ss where:
              dd=loop detector number
              ss=sensitivity value
          securityCode:
            type: string
            description: Security code 2
        command: setLevel
      M0022:
        description: |-
          Request Signal Priority
          
          Useful for bus priority or other type of priorities like emergency vehicles or groups of cyclists.
          
          The benefit of using this message over activating inputs or detector logics is that you can specify a priority level, vehicle type and estimated time of arrival. You can also update or cancel the request, and use the corresponding status message to track the status of the request, including how much priority was actually given.
          
          To understand how this command relates to ETSI/J2735, please see the [wiki](https://github.com/rsmp-nordic/rsmp_sxl_traffic_lights/wiki/Signal-priority-and-ETSI-J2735).
          
          Activating signal priority is expected to provide more green time for a particular movement through the intersection, but the exact mechanism must typically be configured in the controller.
          
          The movement to prioritize can be referenced in a number of ways, depending on what is configured in the controller, and in the system that sends priority requests. Either:
          
          - Reference a signal group by setting ‘signalGroupId’. This method is simple, but will not allow you to have different priority mechanism for the same signal group, unless they can be distinguished by the vehicle type. For example, if you need to trigger different priorities depending on whether a bus goes straight or makes a turn for the same signal group, you need to use of the other referencing methods.
          - Reference an input by setting ‘inputId’. This can be useful if you previously used inputs to activate priority. The input will not be activated, only the priority.
          - Reference a connection by setting ‘connectionId’. A connection is a movement from a specific ingoing lane to a specific outgoing lane.
          - Reference an intersection approach by setting ‘approachId’.
          - Reference an ingoing lane by setting ‘laneInId’, and optionally also reference an outgoing lane by setting ‘laneOutId’.
          
          Referencing attributes that are not used must be left out, rather than set to null or empty strings. This includes:
          
          - signalGroupId
          - inputId
          - connectionId
          - approachId
          - laneInId
          - laneOutId
          
          Referencing attributes are only used when initiating a request. When updating or cancelling the request, the request is identified by its requestId, and no referencing attributes are allowed.
          
          You initiate a priority request with type set to ‘new’. You must provide a request id that uniquely identifies the request on the controller. It can be a randomly generated UUID (universally unique identifier), or it can be constructed by combining e.g. a vehicle id and some other identifier. When updating or cancelling a request, you must pass the same request id again.
          
          Providing ETA (estimated time of arrival) when initiating a request is optional, but can help the controller plan ahead in cases where you’re able to send the request before the vehicle arrives at the intersection. You’re allowed to initiate the request without an ETA and provide it in a later request update. But providing the ETA when initiating the request is recommended, since it will give the controller more time to plan ahead.
          
          Like ETA, providing a vehicle type is optional, but can help the controller decide how to best handle the request.
          
          The priority level provides a way to indicate the relative importance of the request compared to other requests. For example, emergency vehicles or delayed buses could be given a higher priority level.
          
          If the ETA changes before the priority is cancelled, or you want to change the priority level, you can send another request message with type set to ‘update’. The vehicle type cannot be changed.
          
          When you send a priority request, it will be processed to decide if it’s possible to activate the requested priority.
          
          If the request is accepted, the priority can either be activated immediately, or if another priority is currently active, it can be queued for later activation.
          
          If the priority cannot be accepted the request is rejected. Cooldown is a specific type of rejection, which means that s similar request has just completed, and some time needs to pass before a similar request can be activated.
          
          When a request is queued, it is expected to become activated later, but in case too long passes without activation, the controller is expected to time out the request.
          
          Once a priority is activated, you’re excepted to cancel it as soon as there’s no need for it anymore, typically when the vehicle has passed the intersection. You cancel a request by sending a request passing the existing request id setting the type to ‘cancel’.
          
          If a request is never cancelled, the controller is expected to remove the priority at some point, but until then the priority might block requests in other direction which is why you should always cancel a priority when it’s not needed anymore.
        arguments:
          requestId:
            type: string
            description: A string that uniquely identifies the request on the controller
          signalGroupId:
            type: string
            optional: true
            description: ID of a signal group component.
          inputId:
            type: integer
            optional: true
            description: ID of an input, using the same numbering scheme as M0006
            min: 0
            max: 255
          connectionId:
            type: integer
            optional: true
            description: ID of a connection, connecting an ingoing and an outgoing
              lane
            min: 0
            max: 255
          approachId:
            type: integer
            optional: true
            description: ID of an intersection approach
            min: 0
            max: 16
          laneInId:
            type: integer
            optional: true
            description: ID of an ingoing lane
            min: 0
            max: 255
          laneOutId:
            type: integer
            optional: true
            description: ID of an outgoing lane
            min: 0
            max: 255
          priorityId:
            type: integer
            optional: true
            description: ID of a priority
            min: 0
            max: 255
          type:
            type: string
            values:
              new: New priority request
              update: Update to existing priority request
              cancel: Cancel an existing priority
          level:
            type: integer
            description: '0: Lowest, 14: Highest'
            min: 0
            max: 14
          eta:
            type: integer
            optional: true
            description: Estimated time of arrival to the intersection, in seconds
            min: 0
            max: 255
          vehicleType:
            type: string
            optional: true
            description: Vehicle type
            values:
              pedestrian: Pedestrians
              bicycle: Bicycles
              motorcycle: Motorcycles
              car: Passenger vehicle
              bus: Bus used for public transport
              lightTruck: Light truck
              heavyTruck: Heavy truck
              tram: Trams used for Public transport
              emergency: Police, fire or ambulance
              safetyCar: For e.g. escort vehicles
              specialTransport: For e.g. heavy load
              other: Other type of vehicle
        command: requestPriority
      M0023:
        description: |-
          Set timeout for dynamic bands
          Switch to a designated time plan if this timeout is reached due to lost connection with the supervisor.
          Disable by setting timeout to '0'.
          Used in conjunction with dynamic bands, M0014
          Requires security code 2.
        arguments:
          status:
            type: integer
            min: 0
            max: 65535
            description: Timeout, in minutes
          securityCode:
            type: string
            description: Security code 2
        command: setTimeout
      M0103:
        description: |-
          Set security code.
          Change the security code to use when sending commands
          Security codes are used as an extra layer of security in many commands. They need to match between the supervision system and the traffic light controller in order for the commands to be executed.
        arguments:
          status:
            type: string
            values:
              Level1: Change security code 1
              Level2: Change security code 2
          oldSecurityCode:
            type: string
            description: Previous security code
          newSecurityCode:
            type: string
            description: New security code
        command: setSecurityCode
      M0104:
        description: |-
          Set clock.
          Can be used to manually set the clock of the traffic light controller if automatic  time synchronization (NTP or watchdog sync) is not available. For instance, during maintenance work.
          Note: UTC is used.
          Requires security code 1
        arguments:
          securityCode:
            type: string
            description: Security code 1
          year:
            type: integer
            description: Year
            min: 0
            max: 9999
          month:
            type: integer
            description: Month
            min: 1
            max: 12
          day:
            type: integer
            description: Day of month
            min: 1
            max: 31
          hour:
            type: integer
            description: Hour
            min: 0
            max: 23
          minute:
            type: integer
            description: Minute
            min: 0
            max: 59
          second:
            type: integer
            description: Second
            min: 0
            max: 59
        command: setDate
  Signal group:
    description: 
    alarms:
      A0008:
        description: |-
          Dead lock error.
          Used for dead lock errors.
          For instance; a signal group has requested green but is unable to switch due to a conflicting signal group for an extended period of time. At some point the request times out and the controller goes failure mode. The cause for this error is due to configuration errors or external sources.
          Is a "major fault" defined according to 3.8 in EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
        arguments:
          timeplan:
            type: integer
            description: Current time plan
            min: 1
            max: 255
      A0101:
        description: |-
          Pushbutton error.
          Used for push buttons.
        priority: 3
        category: D
      A0201:
        description: |-
          Serious lamp error.
          Used for lamp errors.
          Is a "major fault" defined according to 3.8 in EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
        arguments:
          color:
            type: string
            description: Color of lamp
            values:
              red: red
              yellow: yellow
              green: green
      A0202:
        description: |-
          Less serious lamp error.
          Used for lamp errors.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        arguments:
          color:
            type: string
            description: Color of lamp
            values:
              red: red
              yellow: yellow
              green: green
    statuses:
      S0025:
        description: |-
          Time-of-Green / Time-of-Red.
          Provides predicted signal timings of green and red for each signal group. Max, min and likely time to green and red.
        arguments:
          minToGEstimate:
            type: string
            description: |-
              Time stamp for the minimum time for the signal group to go to green. If the signal group is green, it is the minimum time for the next green.
              Format according to W3C XML dateTime with a resolution of 3 decimal places. All time stamps in UTC. E.g. 2009-10-02T14:34:34.341Z
          maxToGEstimate:
            type: string
            description: |-
              Time stamp for the maximum time for the signal group to go to green. If the signal group is green, it is the maximum time for the next green.
              Format according to W3C XML dateTime with a resolution of 3 decimal places. All time stamps in UTC. E.g. 2009-10-02T14:34:34.341Z
          likelyToGEstimate:
            type: string
            description: |-
              Time stamp for the most likely time for the signal group to go to green. If the signal group is green, it is the most likely time for the next green.
              Format according to W3C XML dateTime with a resolution of 3 decimal places. All time stamps in UTC. E.g. 2009-10-02T14:34:34.341Z
          ToGConfidence:
            type: integer
            description: Confidence of the likelyToGEstimate. 0-100%
            min: 0
            max: 100
          minToREstimate:
            type: string
            description: |-
              Time stamp for the minimum time for the signal group to go to red. If the signal group is red, it is the minimum time for the next red.
              Format according to W3C XML dateTime with a resolution of 3 decimal places. All time stamps in UTC. E.g. 2009-10-02T14:34:34.341Z
          maxToREstimate:
            type: string
            description: |-
              Time stamp for the maximum time for the signal group to go to red. If the signal group is red, it is the maximum time for the next red.
              Format according to W3C XML dateTime with a resolution of 3 decimal places. All time stamps in UTC. E.g. 2009-10-02T14:34:34.341Z
          likelyToREstimate:
            type: string
            description: |-
              Time stamp for the most likely time for the signal group to go to red. If the signal group is red, it is the most likely time for the next red.
              Format according to W3C XML dateTime with a resolution of 3 decimal places. All time stamps in UTC. E.g. 2009-10-02T14:34:34.341Z
          ToRConfidence:
            type: integer
            description: Confidence of the likelyToREstimate. 0-100%
            min: 0
            max: 100
    commands:
      M0010:
        description: |-
          Start of signal group. Orders a signal group to green.
          Although this command is intended to be used with coordination it is not actually specified to be used for this yet. It is reserved in the SXL for possible future use.
          Intended for use with coordination of signaling systems where a traffic light controller communicates with neighboring controllers. Only used when a primary controller orders signal group of other controller to green or red (Coordination with external control bits).
          Requires security code 2
        reserved: true
        arguments:
          status:
            type: boolean
            description: |-
              False: No command (default)
              True: Order a signal group to green
          securityCode:
            type: string
            description: Security code 2
        command: setStart
      M0011:
        description: |-
          Stop of signal group. Orders a signal group to red.
          Although this command is intended to be used with coordination it is not actually specified to be used for this yet. It is reserved in the SXL for possible future use.
          Intended for use with coordination of signaling systems where a traffic light controller communicates with neighboring controllers. Only used when a primary controller orders signal group of other controller to green or red (Coordination with external control bits).
          Requires security code 2
        reserved: true
        arguments:
          status:
            type: boolean
            description: |-
              False: No command (default)
              True: Order a signal group to red
          securityCode:
            type: string
            description: Security code 2
        command: setStop
  Detector logic:
    description: 
    alarms:
      A0301:
        description: |-
          Detector error (hardware).
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        arguments:
          detector:
            type: string
            description: Designation of the detector (hardware)
          type:
            type: string
            description: Type of detector
            values:
              loop: Inductive detector loop
              input: External input
          errormode:
            type: string
            description: Detector forced on/off while detector error
            values:
              'on': 
              'off': 
          manual:
            type: boolean
            description: Manually controlled detector logic (True/False)
      A0302:
        description: |-
          Detector error (logic error).
          For instance; detector continuously on or off during an extended time.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        arguments:
          detector:
            type: string
            description: Designation of the detector (hardware)
          type:
            type: string
            description: Type of detector.
            values:
              loop: Inductive detector loop
              input: External input
          errormode:
            type: string
            description: Detector forced on/off while detector error
            values:
              'on': ''
              'off': ''
          manual:
            type: boolean
            description: Manually controlled detector logic (True/False)
          logicerror:
            type: string
            description: Type of logic error
            values:
              always_off: no detection during predefined max time
              always_on: detection constantly on during predefined max time
              intermittent: intermittent logic fault (flutter)
      A0303:
        description: |-
          Serious detector error (hardware).
          Is a “major fault” defined according to 3.8 i EN12675 which causes the controller to switch to a “failure mode” according to 3.6 in EN12675.
        priority: 2
        category: D
        arguments:
          detector:
            type: string
            description: Designation of the detector (hardware)
          type:
            type: string
            description: Type of detector.
            values:
              loop: Inductive detector loop
              input: External input
          errormode:
            type: string
            description: Detector forced on/off while detector error
            values:
            - 'on'
            - 'off'
          manual:
            type: boolean
            description: Manually controlled detector logic (True/False)
      A0304:
        description: |-
          Serious detector error (logic error).
          For instance; detector continuously on or off during an extended time.
          Is a “major fault” defined according to 3.8 i EN12675 which causes the controller to switch to a “failure mode” according to 3.6 in EN12675
        priority: 2
        category: D
        arguments:
          detector:
            type: string
            description: Designation of the detector (hardware)
          type:
            type: string
            description: Type of detector.
            values:
              loop: Inductive detector loop
              input: External input
          errormode:
            type: string
            description: Detector forced on/off while detector error
            values:
            - 'on'
            - 'off'
          manual:
            type: boolean
            description: Manually controlled detector logic (True/False)
          logicerror:
            type: string
            description: Type of logic error
            values:
              always_off: no detection during predefined max time
              always_on: detection constantly on during predefined max time
              intermittent: intermittent logic fault (flutter)
    statuses:
      S0201:
        description: |-
          Traffic Counting: Number of vehicles.
          Used for Traffic counting.
        arguments:
          starttime:
            type: string
            description: Time stamp for start of measuring. Format according to W3C
              XML dateTime with a resolution of 3 decimal places. All time stamps
              in UTC. E.g. 2009-10-02T14:34:34.341Z
          vehicles:
            type: integer
            description: Number of vehicles on a given detector logic (since last
              update)
            min: 0
            max: 65535
      S0202:
        description: |-
          Traffic Counting: Vehicle speed.
          Used for Traffic counting.
        arguments:
          starttime:
            type: string
            description: |-
              Time stamp for start of measuring. Format according to W3C
              XML dateTime with a resolution of 3 decimal places. All time stamps
              in UTC. E.g. 2009-10-02T14:34:34.341Z
          speed:
            type: integer
            description: Average speed in km/h
            min: 0
            max: 65535
      S0203:
        description: |-
          Traffic Counting: Occupancy.
          Used for Traffic counting.
        arguments:
          starttime:
            type: string
            description: |-
              Time stamp for start of measuring. Format according to W3C
              XML dateTime with a resolution of 3 decimal places. All time stamps
              in UTC. E.g. 2009-10-02T14:34:34.341Z
          occupancy:
            type: integer
            description: Occupancy in percent (0-100%)
            min: 0
            max: 100
      S0204:
        description: |-
          Traffic Counting: Number of vehicles of given classification.
          Used for Traffic counting.
        arguments:
          starttime:
            type: string
            description: |-
              Time stamp for start of measuring. Format according to W3C
              XML dateTime with a resolution of 3 decimal places. All time stamps
              in UTC. E.g. 2009-10-02T14:34:34.341Z
          P:
            type: integer
            description: Number of cars
            min: 0
            max: 65535
          PS:
            type: integer
            description: Number of cars with trailers
            min: 0
            max: 65535
          L:
            type: integer
            description: Number of trucks
            min: 0
            max: 65535
          LS:
            type: integer
            description: Number of trucks with trailers
            min: 0
            max: 65535
          B:
            type: integer
            description: Number of buses
            min: 0
            max: 65535
          SP:
            type: integer
            description: Number of trams
            min: 0
            max: 65535
          MC:
            type: integer
            description: Number of motor cycles
            min: 0
            max: 65535
          C:
            type: integer
            description: Number of bicycles
            min: 0
            max: 65535
          F:
            type: integer
            description: Number of pedestrians
            min: 0
            max: 65535
    commands:
      M0008:
        description: |-
          Sets manual activation of detector logic.
          Set given detector logic (1-255) to either true or false.
          Can e.g. be used to connect RSMP compatible detection equipment to the traffic light controller. Can also be used for prioritization.
          Requires security code 2
        arguments:
          status:
            type: boolean
            description: |-
              False: Deactivate manual control of detector logic
              True: Activate manual control of detector logic
          securityCode:
            type: string
            description: Security code 2
          mode:
            type: boolean
            description: |-
              False: Deactivate detector logic
              True: Activate detector logic
        command: setForceDetectorLogic
sites:
  AA+BBCC:
    description: Anl. ??
    objects:
      Traffic Light Controller:
        Traffic Light Controller:
          componentId: AA+BBCCC=DDDEEFFF
          ntsObjectId: AA+BBCCC=DDDEEFFF
      Signal group:
        SG1:
          componentId: AA+BBCCC=DDDEEFF1
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG2:
          componentId: AA+BBCCC=DDDEEFF2
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG3:
          componentId: AA+BBCCC=DDDEEFF3
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG4:
          componentId: AA+BBCCC=DDDEEFF4
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG5:
          componentId: AA+BBCCC=DDDEEFF5
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG6:
          componentId: AA+BBCCC=DDDEEFF6
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG7:
          componentId: AA+BBCCC=DDDEEFF7
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG8:
          componentId: AA+BBCCC=DDDEEFF8
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG9:
          componentId: AA+BBCCC=DDDEEFF9
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG10:
          componentId: AA+BBCCC=DDDEEF10
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG11:
          componentId: AA+BBCCC=DDDEEF11
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG12:
          componentId: AA+BBCCC=DDDEEF12
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG13:
          componentId: AA+BBCCC=DDDEEF13
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG14:
          componentId: AA+BBCCC=DDDEEF14
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG15:
          componentId: AA+BBCCC=DDDEEF15
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG16:
          componentId: AA+BBCCC=DDDEEF16
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG17:
          componentId: AA+BBCCC=DDDEEF17
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG18:
          componentId: AA+BBCCC=DDDEEF18
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG19:
          componentId: AA+BBCCC=DDDEEF19
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG20:
          componentId: AA+BBCCC=DDDEEF20
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG21:
          componentId: AA+BBCCC=DDDEEF21
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG22:
          componentId: AA+BBCCC=DDDEEF22
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG23:
          componentId: AA+BBCCC=DDDEEF23
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG24:
          componentId: AA+BBCCC=DDDEEF24
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG25:
          componentId: AA+BBCCC=DDDEEF25
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG26:
          componentId: AA+BBCCC=DDDEEF26
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG27:
          componentId: AA+BBCCC=DDDEEF27
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG28:
          componentId: AA+BBCCC=DDDEEF28
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG29:
          componentId: AA+BBCCC=DDDEEF29
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG30:
          componentId: AA+BBCCC=DDDEEF30
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG31:
          componentId: AA+BBCCC=DDDEEF31
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG32:
          componentId: AA+BBCCC=DDDEEF32
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG33:
          componentId: AA+BBCCC=DDDEEF33
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG34:
          componentId: AA+BBCCC=DDDEEF34
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG35:
          componentId: AA+BBCCC=DDDEEF35
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG36:
          componentId: AA+BBCCC=DDDEEF36
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG37:
          componentId: AA+BBCCC=DDDEEF37
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG38:
          componentId: AA+BBCCC=DDDEEF38
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG39:
          componentId: AA+BBCCC=DDDEEF39
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG40:
          componentId: AA+BBCCC=DDDEEF40
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG41:
          componentId: AA+BBCCC=DDDEEF41
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG42:
          componentId: AA+BBCCC=DDDEEF42
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG43:
          componentId: AA+BBCCC=DDDEEF43
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG44:
          componentId: AA+BBCCC=DDDEEF44
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG45:
          componentId: AA+BBCCC=DDDEEF45
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG46:
          componentId: AA+BBCCC=DDDEEF46
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG47:
          componentId: AA+BBCCC=DDDEEF47
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG48:
          componentId: AA+BBCCC=DDDEEF48
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG49:
          componentId: AA+BBCCC=DDDEEF49
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG50:
          componentId: AA+BBCCC=DDDEEF50
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG51:
          componentId: AA+BBCCC=DDDEEF51
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG52:
          componentId: AA+BBCCC=DDDEEF52
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG53:
          componentId: AA+BBCCC=DDDEEF53
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG54:
          componentId: AA+BBCCC=DDDEEF54
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG55:
          componentId: AA+BBCCC=DDDEEF55
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG56:
          componentId: AA+BBCCC=DDDEEF56
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG57:
          componentId: AA+BBCCC=DDDEEF57
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG58:
          componentId: AA+BBCCC=DDDEEF58
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG59:
          componentId: AA+BBCCC=DDDEEF59
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG60:
          componentId: AA+BBCCC=DDDEEF60
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG61:
          componentId: AA+BBCCC=DDDEEF61
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG62:
          componentId: AA+BBCCC=DDDEEF62
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG63:
          componentId: AA+BBCCC=DDDEEF63
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG64:
          componentId: AA+BBCCC=DDDEEF64
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG65:
          componentId: AA+BBCCC=DDDEEF65
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG66:
          componentId: AA+BBCCC=DDDEEF66
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG67:
          componentId: AA+BBCCC=DDDEEF67
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG68:
          componentId: AA+BBCCC=DDDEEF68
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG69:
          componentId: AA+BBCCC=DDDEEF69
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG70:
          componentId: AA+BBCCC=DDDEEF70
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG71:
          componentId: AA+BBCCC=DDDEEF71
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG72:
          componentId: AA+BBCCC=DDDEEF72
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG73:
          componentId: AA+BBCCC=DDDEEF73
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG74:
          componentId: AA+BBCCC=DDDEEF74
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG75:
          componentId: AA+BBCCC=DDDEEF75
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG76:
          componentId: AA+BBCCC=DDDEEF76
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG77:
          componentId: AA+BBCCC=DDDEEF77
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG78:
          componentId: AA+BBCCC=DDDEEF78
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG79:
          componentId: AA+BBCCC=DDDEEF79
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG80:
          componentId: AA+BBCCC=DDDEEF80
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG81:
          componentId: AA+BBCCC=DDDEEF81
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG82:
          componentId: AA+BBCCC=DDDEEF82
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG83:
          componentId: AA+BBCCC=DDDEEF83
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG84:
          componentId: AA+BBCCC=DDDEEF84
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG85:
          componentId: AA+BBCCC=DDDEEF85
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG86:
          componentId: AA+BBCCC=DDDEEF86
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG87:
          componentId: AA+BBCCC=DDDEEF87
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG88:
          componentId: AA+BBCCC=DDDEEF88
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG89:
          componentId: AA+BBCCC=DDDEEF89
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG90:
          componentId: AA+BBCCC=DDDEEF90
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG91:
          componentId: AA+BBCCC=DDDEEF91
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG92:
          componentId: AA+BBCCC=DDDEEF92
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG93:
          componentId: AA+BBCCC=DDDEEF93
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG94:
          componentId: AA+BBCCC=DDDEEF94
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG95:
          componentId: AA+BBCCC=DDDEEF95
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG96:
          componentId: AA+BBCCC=DDDEEF96
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG97:
          componentId: AA+BBCCC=DDDEEF97
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG98:
          componentId: AA+BBCCC=DDDEEF98
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG99:
          componentId: AA+BBCCC=DDDEEF99
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG100:
          componentId: AA+BBCCC=DDDEE100
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG101:
          componentId: AA+BBCCC=DDDEE101
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG102:
          componentId: AA+BBCCC=DDDEE102
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG103:
          componentId: AA+BBCCC=DDDEE103
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG104:
          componentId: AA+BBCCC=DDDEE104
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG105:
          componentId: AA+BBCCC=DDDEE105
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG106:
          componentId: AA+BBCCC=DDDEE106
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG107:
          componentId: AA+BBCCC=DDDEE107
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG108:
          componentId: AA+BBCCC=DDDEE108
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG109:
          componentId: AA+BBCCC=DDDEE109
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG110:
          componentId: AA+BBCCC=DDDEE110
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG111:
          componentId: AA+BBCCC=DDDEE111
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG112:
          componentId: AA+BBCCC=DDDEE112
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG113:
          componentId: AA+BBCCC=DDDEE113
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG114:
          componentId: AA+BBCCC=DDDEE114
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG115:
          componentId: AA+BBCCC=DDDEE115
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG116:
          componentId: AA+BBCCC=DDDEE116
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG117:
          componentId: AA+BBCCC=DDDEE117
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG118:
          componentId: AA+BBCCC=DDDEE118
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG119:
          componentId: AA+BBCCC=DDDEE119
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG120:
          componentId: AA+BBCCC=DDDEE120
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG121:
          componentId: AA+BBCCC=DDDEE121
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG122:
          componentId: AA+BBCCC=DDDEE122
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG123:
          componentId: AA+BBCCC=DDDEE123
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG124:
          componentId: AA+BBCCC=DDDEE124
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG125:
          componentId: AA+BBCCC=DDDEE125
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG126:
          componentId: AA+BBCCC=DDDEE126
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG127:
          componentId: AA+BBCCC=DDDEE127
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG128:
          componentId: AA+BBCCC=DDDEE128
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG129:
          componentId: AA+BBCCC=DDDEE129
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG130:
          componentId: AA+BBCCC=DDDEE130
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG131:
          componentId: AA+BBCCC=DDDEE131
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG132:
          componentId: AA+BBCCC=DDDEE132
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG133:
          componentId: AA+BBCCC=DDDEE133
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG134:
          componentId: AA+BBCCC=DDDEE134
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG135:
          componentId: AA+BBCCC=DDDEE135
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG136:
          componentId: AA+BBCCC=DDDEE136
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG137:
          componentId: AA+BBCCC=DDDEE137
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG138:
          componentId: AA+BBCCC=DDDEE138
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG139:
          componentId: AA+BBCCC=DDDEE139
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG140:
          componentId: AA+BBCCC=DDDEE140
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG141:
          componentId: AA+BBCCC=DDDEE141
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG142:
          componentId: AA+BBCCC=DDDEE142
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG143:
          componentId: AA+BBCCC=DDDEE143
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG144:
          componentId: AA+BBCCC=DDDEE144
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG145:
          componentId: AA+BBCCC=DDDEE145
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG146:
          componentId: AA+BBCCC=DDDEE146
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG147:
          componentId: AA+BBCCC=DDDEE147
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG148:
          componentId: AA+BBCCC=DDDEE148
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG149:
          componentId: AA+BBCCC=DDDEE149
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG150:
          componentId: AA+BBCCC=DDDEE150
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG151:
          componentId: AA+BBCCC=DDDEE151
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG152:
          componentId: AA+BBCCC=DDDEE152
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG153:
          componentId: AA+BBCCC=DDDEE153
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG154:
          componentId: AA+BBCCC=DDDEE154
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG155:
          componentId: AA+BBCCC=DDDEE155
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG156:
          componentId: AA+BBCCC=DDDEE156
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG157:
          componentId: AA+BBCCC=DDDEE157
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG158:
          componentId: AA+BBCCC=DDDEE158
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG159:
          componentId: AA+BBCCC=DDDEE159
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG160:
          componentId: AA+BBCCC=DDDEE160
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG161:
          componentId: AA+BBCCC=DDDEE161
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG162:
          componentId: AA+BBCCC=DDDEE162
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG163:
          componentId: AA+BBCCC=DDDEE163
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG164:
          componentId: AA+BBCCC=DDDEE164
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG165:
          componentId: AA+BBCCC=DDDEE165
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG166:
          componentId: AA+BBCCC=DDDEE166
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG167:
          componentId: AA+BBCCC=DDDEE167
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG168:
          componentId: AA+BBCCC=DDDEE168
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG169:
          componentId: AA+BBCCC=DDDEE169
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG170:
          componentId: AA+BBCCC=DDDEE170
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG171:
          componentId: AA+BBCCC=DDDEE171
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG172:
          componentId: AA+BBCCC=DDDEE172
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG173:
          componentId: AA+BBCCC=DDDEE173
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG174:
          componentId: AA+BBCCC=DDDEE174
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG175:
          componentId: AA+BBCCC=DDDEE175
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG176:
          componentId: AA+BBCCC=DDDEE176
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG177:
          componentId: AA+BBCCC=DDDEE177
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG178:
          componentId: AA+BBCCC=DDDEE178
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG179:
          componentId: AA+BBCCC=DDDEE179
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG180:
          componentId: AA+BBCCC=DDDEE180
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG181:
          componentId: AA+BBCCC=DDDEE181
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG182:
          componentId: AA+BBCCC=DDDEE182
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG183:
          componentId: AA+BBCCC=DDDEE183
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG184:
          componentId: AA+BBCCC=DDDEE184
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG185:
          componentId: AA+BBCCC=DDDEE185
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG186:
          componentId: AA+BBCCC=DDDEE186
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG187:
          componentId: AA+BBCCC=DDDEE187
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG188:
          componentId: AA+BBCCC=DDDEE188
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG189:
          componentId: AA+BBCCC=DDDEE189
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG190:
          componentId: AA+BBCCC=DDDEE190
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG191:
          componentId: AA+BBCCC=DDDEE191
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG192:
          componentId: AA+BBCCC=DDDEE192
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG193:
          componentId: AA+BBCCC=DDDEE193
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG194:
          componentId: AA+BBCCC=DDDEE194
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG195:
          componentId: AA+BBCCC=DDDEE195
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG196:
          componentId: AA+BBCCC=DDDEE196
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG197:
          componentId: AA+BBCCC=DDDEE197
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG198:
          componentId: AA+BBCCC=DDDEE198
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG199:
          componentId: AA+BBCCC=DDDEE199
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG200:
          componentId: AA+BBCCC=DDDEE200
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG201:
          componentId: AA+BBCCC=DDDEE201
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG202:
          componentId: AA+BBCCC=DDDEE202
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG203:
          componentId: AA+BBCCC=DDDEE203
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG204:
          componentId: AA+BBCCC=DDDEE204
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG205:
          componentId: AA+BBCCC=DDDEE205
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG206:
          componentId: AA+BBCCC=DDDEE206
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG207:
          componentId: AA+BBCCC=DDDEE207
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG208:
          componentId: AA+BBCCC=DDDEE208
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG209:
          componentId: AA+BBCCC=DDDEE209
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG210:
          componentId: AA+BBCCC=DDDEE210
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG211:
          componentId: AA+BBCCC=DDDEE211
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG212:
          componentId: AA+BBCCC=DDDEE212
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG213:
          componentId: AA+BBCCC=DDDEE213
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG214:
          componentId: AA+BBCCC=DDDEE214
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG215:
          componentId: AA+BBCCC=DDDEE215
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG216:
          componentId: AA+BBCCC=DDDEE216
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG217:
          componentId: AA+BBCCC=DDDEE217
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG218:
          componentId: AA+BBCCC=DDDEE218
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG219:
          componentId: AA+BBCCC=DDDEE219
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG220:
          componentId: AA+BBCCC=DDDEE220
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG221:
          componentId: AA+BBCCC=DDDEE221
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG222:
          componentId: AA+BBCCC=DDDEE222
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG223:
          componentId: AA+BBCCC=DDDEE223
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG224:
          componentId: AA+BBCCC=DDDEE224
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG225:
          componentId: AA+BBCCC=DDDEE225
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG226:
          componentId: AA+BBCCC=DDDEE226
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG227:
          componentId: AA+BBCCC=DDDEE227
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG228:
          componentId: AA+BBCCC=DDDEE228
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG229:
          componentId: AA+BBCCC=DDDEE229
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG230:
          componentId: AA+BBCCC=DDDEE230
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG231:
          componentId: AA+BBCCC=DDDEE231
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG232:
          componentId: AA+BBCCC=DDDEE232
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG233:
          componentId: AA+BBCCC=DDDEE233
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG234:
          componentId: AA+BBCCC=DDDEE234
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG235:
          componentId: AA+BBCCC=DDDEE235
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG236:
          componentId: AA+BBCCC=DDDEE236
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG237:
          componentId: AA+BBCCC=DDDEE237
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG238:
          componentId: AA+BBCCC=DDDEE238
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG239:
          componentId: AA+BBCCC=DDDEE239
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG240:
          componentId: AA+BBCCC=DDDEE240
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG241:
          componentId: AA+BBCCC=DDDEE241
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG242:
          componentId: AA+BBCCC=DDDEE242
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG243:
          componentId: AA+BBCCC=DDDEE243
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG244:
          componentId: AA+BBCCC=DDDEE244
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG245:
          componentId: AA+BBCCC=DDDEE245
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG246:
          componentId: AA+BBCCC=DDDEE246
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG247:
          componentId: AA+BBCCC=DDDEE247
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG248:
          componentId: AA+BBCCC=DDDEE248
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG249:
          componentId: AA+BBCCC=DDDEE249
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG250:
          componentId: AA+BBCCC=DDDEE250
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG251:
          componentId: AA+BBCCC=DDDEE251
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG252:
          componentId: AA+BBCCC=DDDEE252
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG253:
          componentId: AA+BBCCC=DDDEE253
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG254:
          componentId: AA+BBCCC=DDDEE254
          ntsObjectId: AA+BBCCC=DDDEEFFF
        SG255:
          componentId: AA+BBCCC=DDDEE255
          ntsObjectId: AA+BBCCC=DDDEEFFF
      Detector logic:
        DL1:
          componentId: AA+BBCCC=DDDDLAA1
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL2:
          componentId: AA+BBCCC=DDDDLAA2
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL3:
          componentId: AA+BBCCC=DDDDLAA3
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL4:
          componentId: AA+BBCCC=DDDDLAA4
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL5:
          componentId: AA+BBCCC=DDDDLAA5
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL6:
          componentId: AA+BBCCC=DDDDLAA6
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL7:
          componentId: AA+BBCCC=DDDDLAA7
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL8:
          componentId: AA+BBCCC=DDDDLAA8
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL9:
          componentId: AA+BBCCC=DDDDLAA9
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL10:
          componentId: AA+BBCCC=DDDDLA10
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL11:
          componentId: AA+BBCCC=DDDDLA11
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL12:
          componentId: AA+BBCCC=DDDDLA12
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL13:
          componentId: AA+BBCCC=DDDDLA13
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL14:
          componentId: AA+BBCCC=DDDDLA14
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL15:
          componentId: AA+BBCCC=DDDDLA15
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL16:
          componentId: AA+BBCCC=DDDDLA16
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL17:
          componentId: AA+BBCCC=DDDDLA17
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL18:
          componentId: AA+BBCCC=DDDDLA18
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL19:
          componentId: AA+BBCCC=DDDDLA19
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL20:
          componentId: AA+BBCCC=DDDDLA20
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL21:
          componentId: AA+BBCCC=DDDDLA21
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL22:
          componentId: AA+BBCCC=DDDDLA22
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL23:
          componentId: AA+BBCCC=DDDDLA23
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL24:
          componentId: AA+BBCCC=DDDDLA24
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL25:
          componentId: AA+BBCCC=DDDDLA25
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL26:
          componentId: AA+BBCCC=DDDDLA26
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL27:
          componentId: AA+BBCCC=DDDDLA27
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL28:
          componentId: AA+BBCCC=DDDDLA28
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL29:
          componentId: AA+BBCCC=DDDDLA29
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL30:
          componentId: AA+BBCCC=DDDDLA30
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL31:
          componentId: AA+BBCCC=DDDDLA31
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL32:
          componentId: AA+BBCCC=DDDDLA32
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL33:
          componentId: AA+BBCCC=DDDDLA33
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL34:
          componentId: AA+BBCCC=DDDDLA34
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL35:
          componentId: AA+BBCCC=DDDDLA35
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL36:
          componentId: AA+BBCCC=DDDDLA36
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL37:
          componentId: AA+BBCCC=DDDDLA37
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL38:
          componentId: AA+BBCCC=DDDDLA38
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL39:
          componentId: AA+BBCCC=DDDDLA39
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL40:
          componentId: AA+BBCCC=DDDDLA40
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL41:
          componentId: AA+BBCCC=DDDDLA41
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL42:
          componentId: AA+BBCCC=DDDDLA42
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL43:
          componentId: AA+BBCCC=DDDDLA43
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL44:
          componentId: AA+BBCCC=DDDDLA44
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL45:
          componentId: AA+BBCCC=DDDDLA45
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL46:
          componentId: AA+BBCCC=DDDDLA46
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL47:
          componentId: AA+BBCCC=DDDDLA47
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL48:
          componentId: AA+BBCCC=DDDDLA48
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL49:
          componentId: AA+BBCCC=DDDDLA49
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL50:
          componentId: AA+BBCCC=DDDDLA50
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL51:
          componentId: AA+BBCCC=DDDDLA51
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL52:
          componentId: AA+BBCCC=DDDDLA52
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL53:
          componentId: AA+BBCCC=DDDDLA53
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL54:
          componentId: AA+BBCCC=DDDDLA54
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL55:
          componentId: AA+BBCCC=DDDDLA55
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL56:
          componentId: AA+BBCCC=DDDDLA56
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL57:
          componentId: AA+BBCCC=DDDDLA57
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL58:
          componentId: AA+BBCCC=DDDDLA58
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL59:
          componentId: AA+BBCCC=DDDDLA59
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL60:
          componentId: AA+BBCCC=DDDDLA60
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL61:
          componentId: AA+BBCCC=DDDDLA61
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL62:
          componentId: AA+BBCCC=DDDDLA62
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL63:
          componentId: AA+BBCCC=DDDDLA63
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL64:
          componentId: AA+BBCCC=DDDDLA64
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL65:
          componentId: AA+BBCCC=DDDDLA65
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL66:
          componentId: AA+BBCCC=DDDDLA66
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL67:
          componentId: AA+BBCCC=DDDDLA67
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL68:
          componentId: AA+BBCCC=DDDDLA68
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL69:
          componentId: AA+BBCCC=DDDDLA69
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL70:
          componentId: AA+BBCCC=DDDDLA70
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL71:
          componentId: AA+BBCCC=DDDDLA71
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL72:
          componentId: AA+BBCCC=DDDDLA72
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL73:
          componentId: AA+BBCCC=DDDDLA73
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL74:
          componentId: AA+BBCCC=DDDDLA74
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL75:
          componentId: AA+BBCCC=DDDDLA75
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL76:
          componentId: AA+BBCCC=DDDDLA76
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL77:
          componentId: AA+BBCCC=DDDDLA77
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL78:
          componentId: AA+BBCCC=DDDDLA78
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL79:
          componentId: AA+BBCCC=DDDDLA79
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL80:
          componentId: AA+BBCCC=DDDDLA80
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL81:
          componentId: AA+BBCCC=DDDDLA81
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL82:
          componentId: AA+BBCCC=DDDDLA82
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL83:
          componentId: AA+BBCCC=DDDDLA83
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL84:
          componentId: AA+BBCCC=DDDDLA84
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL85:
          componentId: AA+BBCCC=DDDDLA85
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL86:
          componentId: AA+BBCCC=DDDDLA86
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL87:
          componentId: AA+BBCCC=DDDDLA87
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL88:
          componentId: AA+BBCCC=DDDDLA88
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL89:
          componentId: AA+BBCCC=DDDDLA89
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL90:
          componentId: AA+BBCCC=DDDDLA90
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL91:
          componentId: AA+BBCCC=DDDDLA91
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL92:
          componentId: AA+BBCCC=DDDDLA92
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL93:
          componentId: AA+BBCCC=DDDDLA93
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL94:
          componentId: AA+BBCCC=DDDDLA94
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL95:
          componentId: AA+BBCCC=DDDDLA95
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL96:
          componentId: AA+BBCCC=DDDDLA96
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL97:
          componentId: AA+BBCCC=DDDDLA97
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL98:
          componentId: AA+BBCCC=DDDDLA98
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL99:
          componentId: AA+BBCCC=DDDDLA99
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL100:
          componentId: AA+BBCCC=DDDDL100
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL101:
          componentId: AA+BBCCC=DDDDL101
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL102:
          componentId: AA+BBCCC=DDDDL102
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL103:
          componentId: AA+BBCCC=DDDDL103
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL104:
          componentId: AA+BBCCC=DDDDL104
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL105:
          componentId: AA+BBCCC=DDDDL105
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL106:
          componentId: AA+BBCCC=DDDDL106
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL107:
          componentId: AA+BBCCC=DDDDL107
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL108:
          componentId: AA+BBCCC=DDDDL108
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL109:
          componentId: AA+BBCCC=DDDDL109
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL110:
          componentId: AA+BBCCC=DDDDL110
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL111:
          componentId: AA+BBCCC=DDDDL111
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL112:
          componentId: AA+BBCCC=DDDDL112
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL113:
          componentId: AA+BBCCC=DDDDL113
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL114:
          componentId: AA+BBCCC=DDDDL114
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL115:
          componentId: AA+BBCCC=DDDDL115
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL116:
          componentId: AA+BBCCC=DDDDL116
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL117:
          componentId: AA+BBCCC=DDDDL117
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL118:
          componentId: AA+BBCCC=DDDDL118
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL119:
          componentId: AA+BBCCC=DDDDL119
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL120:
          componentId: AA+BBCCC=DDDDL120
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL121:
          componentId: AA+BBCCC=DDDDL121
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL122:
          componentId: AA+BBCCC=DDDDL122
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL123:
          componentId: AA+BBCCC=DDDDL123
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL124:
          componentId: AA+BBCCC=DDDDL124
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL125:
          componentId: AA+BBCCC=DDDDL125
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL126:
          componentId: AA+BBCCC=DDDDL126
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL127:
          componentId: AA+BBCCC=DDDDL127
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL128:
          componentId: AA+BBCCC=DDDDL128
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL129:
          componentId: AA+BBCCC=DDDDL129
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL130:
          componentId: AA+BBCCC=DDDDL130
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL131:
          componentId: AA+BBCCC=DDDDL131
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL132:
          componentId: AA+BBCCC=DDDDL132
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL133:
          componentId: AA+BBCCC=DDDDL133
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL134:
          componentId: AA+BBCCC=DDDDL134
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL135:
          componentId: AA+BBCCC=DDDDL135
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL136:
          componentId: AA+BBCCC=DDDDL136
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL137:
          componentId: AA+BBCCC=DDDDL137
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL138:
          componentId: AA+BBCCC=DDDDL138
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL139:
          componentId: AA+BBCCC=DDDDL139
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL140:
          componentId: AA+BBCCC=DDDDL140
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL141:
          componentId: AA+BBCCC=DDDDL141
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL142:
          componentId: AA+BBCCC=DDDDL142
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL143:
          componentId: AA+BBCCC=DDDDL143
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL144:
          componentId: AA+BBCCC=DDDDL144
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL145:
          componentId: AA+BBCCC=DDDDL145
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL146:
          componentId: AA+BBCCC=DDDDL146
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL147:
          componentId: AA+BBCCC=DDDDL147
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL148:
          componentId: AA+BBCCC=DDDDL148
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL149:
          componentId: AA+BBCCC=DDDDL149
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL150:
          componentId: AA+BBCCC=DDDDL150
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL151:
          componentId: AA+BBCCC=DDDDL151
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL152:
          componentId: AA+BBCCC=DDDDL152
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL153:
          componentId: AA+BBCCC=DDDDL153
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL154:
          componentId: AA+BBCCC=DDDDL154
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL155:
          componentId: AA+BBCCC=DDDDL155
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL156:
          componentId: AA+BBCCC=DDDDL156
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL157:
          componentId: AA+BBCCC=DDDDL157
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL158:
          componentId: AA+BBCCC=DDDDL158
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL159:
          componentId: AA+BBCCC=DDDDL159
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL160:
          componentId: AA+BBCCC=DDDDL160
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL161:
          componentId: AA+BBCCC=DDDDL161
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL162:
          componentId: AA+BBCCC=DDDDL162
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL163:
          componentId: AA+BBCCC=DDDDL163
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL164:
          componentId: AA+BBCCC=DDDDL164
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL165:
          componentId: AA+BBCCC=DDDDL165
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL166:
          componentId: AA+BBCCC=DDDDL166
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL167:
          componentId: AA+BBCCC=DDDDL167
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL168:
          componentId: AA+BBCCC=DDDDL168
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL169:
          componentId: AA+BBCCC=DDDDL169
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL170:
          componentId: AA+BBCCC=DDDDL170
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL171:
          componentId: AA+BBCCC=DDDDL171
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL172:
          componentId: AA+BBCCC=DDDDL172
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL173:
          componentId: AA+BBCCC=DDDDL173
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL174:
          componentId: AA+BBCCC=DDDDL174
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL175:
          componentId: AA+BBCCC=DDDDL175
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL176:
          componentId: AA+BBCCC=DDDDL176
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL177:
          componentId: AA+BBCCC=DDDDL177
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL178:
          componentId: AA+BBCCC=DDDDL178
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL179:
          componentId: AA+BBCCC=DDDDL179
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL180:
          componentId: AA+BBCCC=DDDDL180
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL181:
          componentId: AA+BBCCC=DDDDL181
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL182:
          componentId: AA+BBCCC=DDDDL182
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL183:
          componentId: AA+BBCCC=DDDDL183
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL184:
          componentId: AA+BBCCC=DDDDL184
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL185:
          componentId: AA+BBCCC=DDDDL185
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL186:
          componentId: AA+BBCCC=DDDDL186
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL187:
          componentId: AA+BBCCC=DDDDL187
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL188:
          componentId: AA+BBCCC=DDDDL188
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL189:
          componentId: AA+BBCCC=DDDDL189
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL190:
          componentId: AA+BBCCC=DDDDL190
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL191:
          componentId: AA+BBCCC=DDDDL191
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL192:
          componentId: AA+BBCCC=DDDDL192
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL193:
          componentId: AA+BBCCC=DDDDL193
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL194:
          componentId: AA+BBCCC=DDDDL194
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL195:
          componentId: AA+BBCCC=DDDDL195
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL196:
          componentId: AA+BBCCC=DDDDL196
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL197:
          componentId: AA+BBCCC=DDDDL197
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL198:
          componentId: AA+BBCCC=DDDDL198
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL199:
          componentId: AA+BBCCC=DDDDL199
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL200:
          componentId: AA+BBCCC=DDDDL200
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL201:
          componentId: AA+BBCCC=DDDDL201
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL202:
          componentId: AA+BBCCC=DDDDL202
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL203:
          componentId: AA+BBCCC=DDDDL203
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL204:
          componentId: AA+BBCCC=DDDDL204
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL205:
          componentId: AA+BBCCC=DDDDL205
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL206:
          componentId: AA+BBCCC=DDDDL206
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL207:
          componentId: AA+BBCCC=DDDDL207
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL208:
          componentId: AA+BBCCC=DDDDL208
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL209:
          componentId: AA+BBCCC=DDDDL209
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL210:
          componentId: AA+BBCCC=DDDDL210
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL211:
          componentId: AA+BBCCC=DDDDL211
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL212:
          componentId: AA+BBCCC=DDDDL212
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL213:
          componentId: AA+BBCCC=DDDDL213
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL214:
          componentId: AA+BBCCC=DDDDL214
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL215:
          componentId: AA+BBCCC=DDDDL215
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL216:
          componentId: AA+BBCCC=DDDDL216
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL217:
          componentId: AA+BBCCC=DDDDL217
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL218:
          componentId: AA+BBCCC=DDDDL218
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL219:
          componentId: AA+BBCCC=DDDDL219
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL220:
          componentId: AA+BBCCC=DDDDL220
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL221:
          componentId: AA+BBCCC=DDDDL221
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL222:
          componentId: AA+BBCCC=DDDDL222
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL223:
          componentId: AA+BBCCC=DDDDL223
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL224:
          componentId: AA+BBCCC=DDDDL224
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL225:
          componentId: AA+BBCCC=DDDDL225
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL226:
          componentId: AA+BBCCC=DDDDL226
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL227:
          componentId: AA+BBCCC=DDDDL227
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL228:
          componentId: AA+BBCCC=DDDDL228
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL229:
          componentId: AA+BBCCC=DDDDL229
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL230:
          componentId: AA+BBCCC=DDDDL230
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL231:
          componentId: AA+BBCCC=DDDDL231
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL232:
          componentId: AA+BBCCC=DDDDL232
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL233:
          componentId: AA+BBCCC=DDDDL233
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL234:
          componentId: AA+BBCCC=DDDDL234
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL235:
          componentId: AA+BBCCC=DDDDL235
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL236:
          componentId: AA+BBCCC=DDDDL236
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL237:
          componentId: AA+BBCCC=DDDDL237
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL238:
          componentId: AA+BBCCC=DDDDL238
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL239:
          componentId: AA+BBCCC=DDDDL239
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL240:
          componentId: AA+BBCCC=DDDDL240
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL241:
          componentId: AA+BBCCC=DDDDL241
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL242:
          componentId: AA+BBCCC=DDDDL242
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL243:
          componentId: AA+BBCCC=DDDDL243
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL244:
          componentId: AA+BBCCC=DDDDL244
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL245:
          componentId: AA+BBCCC=DDDDL245
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL246:
          componentId: AA+BBCCC=DDDDL246
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL247:
          componentId: AA+BBCCC=DDDDL247
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL248:
          componentId: AA+BBCCC=DDDDL248
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL249:
          componentId: AA+BBCCC=DDDDL249
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL250:
          componentId: AA+BBCCC=DDDDL250
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL251:
          componentId: AA+BBCCC=DDDDL251
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL252:
          componentId: AA+BBCCC=DDDDL252
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL253:
          componentId: AA+BBCCC=DDDDL253
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL254:
          componentId: AA+BBCCC=DDDDL254
          ntsObjectId: AA+BBCCC=DDDEEFFF
        DL255:
          componentId: AA+BBCCC=DDDDL255
          ntsObjectId: AA+BBCCC=DDDEEFFF
